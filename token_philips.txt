contract pCoin {
	struct userWallet {
	uint tokens;
	uint rightsLevel;
	}
	mapping (address => userWallet) public balances;
	function pCoin() {
		balances[msg.sender].tokens = 1000000;
		balances[msg.sender].rightsLevel = 3;
	}
	function sendTokens(address receiver, uint amount) returns(bool successful) {
		if (balances[msg.sender].tokens < amount) return false;
		balances[msg.sender].tokens -= amount;
		balances[receiver].tokens += amount;
		return true;
	}
	function register(address payingUser, uint rightsLevelReq) returns(bool successful) {
		uint cost;
		if (rightsLevelReq == 1) cost = 50;
		else if (rightsLevelReq == 2) cost = 100;
		else if (rightsLevelReq == 3) cost = 200;

		if (balances[payingUser].tokens < cost) return false;
		balances[payingUser].tokens -= cost;
		balances[msg.sender].tokens += cost;
		balances[payingUser].rightsLevel = rightsLevelReq;
		return true;
	}
  function validate(address user) returns(uint){
    return balances[user].rightsLevel;
  }
}


--Addesses where contracts were deployed:----- interface = ABI

*3rd pcoin deployed to:   (added validate function)
var pCoindAdd = "0x8dc03da3c476926e620fc9efd4c6137a02417354"
var interface = [{"constant":false,"inputs":[{"name":"receiver","type":"address"},{"name":"amount","type":"uint256"}],"name":"sendTokens","outputs":[{"name":"successful","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"validate","outputs":[{"name":"level","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balances","outputs":[{"name":"tokens","type":"uint256"},{"name":"rightsLevel","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"payingUser","type":"address"},{"name":"rightsLevelReq","type":"uint256"}],"name":"register","outputs":[{"name":"successful","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"type":"constructor"}]
var pcoin = eth.contract(interface).at(pCoinAdd);


*2nd pcoin Deployed to:   (fixed sendTokens function)
var pCoinAdd = "0xadd2da0f29ffdd7b8a49a1acef84ad402adce75f";
var interface = [{"constant":false,"inputs":[{"name":"receiver","type":"address"},{"name":"amount","type":"uint256"}],"name":"sendTokens","outputs":[{"name":"successful","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balances","outputs":[{"name":"tokens","type":"uint256"},{"name":"rightsLevel","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"payingUser","type":"address"},{"name":"rightsLevelReq","type":"uint256"}],"name":"register","outputs":[{"name":"successful","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"type":"constructor"}]
var pcoin = eth.contract(interface).at(pCoinAdd);

*1st pcoin Deployed to:   (sendTokens function was wrong, money was deducted from transaction sender, not from paying user)
var pCoinAdd = "0xb84488c3df7bb064bdf1e03386f8a9a613af01e9";
var interface = [{"constant":false,"inputs":[{"name":"receiver","type":"address"},{"name":"amount","type":"uint256"}],"name":"sendTokens","outputs":[{"name":"successful","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"balances","outputs":[{"name":"tokens","type":"uint256"},{"name":"rightsLevel","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"receiver","type":"address"},{"name":"rightsLevelReq","type":"uint256"}],"name":"register","outputs":[{"name":"successful","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"type":"constructor"}];
var pcoin = eth.contract(interface).at(pCoinAdd);


--This will do for "validate" the existance of a (user) account and its rightLevels
pcoin.balances(fer)
pcoin.balances(fer)[0] //to check rightsLevel only

pcoin.sendTokens.sendTransaction(jon,1000,{from:fer})
pcoin.register.sendTransaction(jon,3,{from:fer})

listAccounts[]
0x14c1b2ed09229c2df7c04ec92115ece6d1eabe73
0x50dad339ff9cf7e31cf2de1ea55ef54ca29b346c
